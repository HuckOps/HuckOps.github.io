<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HuckOps</title>
  
  
  <link href="http://www.huckops.xyz/atom.xml" rel="self"/>
  
  <link href="http://www.huckops.xyz/"/>
  <updated>2022-04-05T05:59:32.328Z</updated>
  <id>http://www.huckops.xyz/</id>
  
  <author>
    <name>Huck</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>发布工程</title>
    <link href="http://www.huckops.xyz/2022/03/28/SRE%E6%96%B9%E6%B3%95%E8%AE%BA/%E5%8F%91%E5%B8%83%E5%B7%A5%E7%A8%8B/"/>
    <id>http://www.huckops.xyz/2022/03/28/SRE%E6%96%B9%E6%B3%95%E8%AE%BA/%E5%8F%91%E5%B8%83%E5%B7%A5%E7%A8%8B/</id>
    <published>2022-03-28T14:17:34.000Z</published>
    <updated>2022-04-05T05:59:32.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h1><p>对于大型生产环境和复杂的业务系统来说，发布应用或者变更并不是简单的在服务器上运行二进制包或者脚本就可以了，这样很不便于服务的管理，且服务的稳定性也无法保障，所以就会有发布工程这一说法。</p><h1 id="发布工程要素"><a href="#发布工程要素" class="headerlink" title="发布工程要素"></a>发布工程要素</h1><h2 id="自给自足的发布"><a href="#自给自足的发布" class="headerlink" title="自给自足的发布"></a>自给自足的发布</h2><p>对于每个研发团队来说，都需要有一个相对应的发布工程师，发布工程师指定发布策略，编写发布工具，指定发布流程。</p><h2 id="追求速度"><a href="#追求速度" class="headerlink" title="追求速度"></a>追求速度</h2><p>当发布频繁时，每个版本之间的变更将减少。这样能减小新版本上线侯的测试和调试成本。对于项目可以高频次构建，然后在多次构建中选择一个构建版本进行发布（条件：需要是所有测试都通过的版本）。</p><h2 id="密闭性"><a href="#密闭性" class="headerlink" title="密闭性"></a>密闭性</h2><p>每一次构建的产物，都不能因为构建环境差异导致构建差异。所有依赖在构建过程要自包含。</p><p>当构建在生产环境中出现bug时，按照之前的源码版本，加入新的改动之后生成新的构建（即向repo推送fix的commit）。构建的编译环境会被包含到repo中（显然有些不可能，所以最佳做法应该时在repo中保存编译器版本等环境信息），这样能保证每次构建环境都是相同的。</p><h1 id="发布流程"><a href="#发布流程" class="headerlink" title="发布流程"></a>发布流程</h1><p>对于变更发布，一般需要遵循一下流程：</p><ol><li>提交代码到repo，提mr，进行review</li><li>指定流程中的动作</li><li>创建新发布版</li><li>批准集成，即合并mr</li><li>部署发布版</li><li>修改项目配置文件</li></ol><h1 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h1><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p>构建目标应该被定义在配置文件中，如常用的configure文件。可以指定构建的参数及属性。</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>常用的分支管理与google有一些出入。项目变更通常会推送到开发分支，开发分支变更经review和审计之后被合并到发布分支上进行发布，由此可以清楚看出每次合并的变更信息。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>开发分支提交变更后即执行单元测试。以分支的构建结果和测试结果作为指定发布版本的依据。通常可以使用最后一次成功构建和测试通过的版本进行发布。</p><p>发布过程中要进行全部的单元测试，防止开发分支不包含某些发布分支的代码出现未测到的问题。同样要保证最后一次测试通过。</p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>对构建成果进行打包，可以使用构建得出的hash和构建标签进行打标签，加入签名以保证打包的完整性（可以使用MD5）。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>一个发布时的组成时一个或者多个任务组成的逻辑工作单元（可以理解为微服务）。自动发布系统可以用构建时的build tag进行自动化部署（指定发布版本）。对于大型项目部署速度通常时指数型的，即灰度发布。</p><h1 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h1><p>项目配置需要为一致的，所以可以将配置文件存放到项目的repo中，同样进行代码审计。在打包时可以将配置文件一起进行打包，降低部署的难度，但是同样会带来一些问题，比如配置的灵活性下降。可以将配置文件存放于外部存储上，每次发布从外部存储上读取配置文件，从而提高配置的灵活度。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;发布&quot;&gt;&lt;a href=&quot;#发布&quot; class=&quot;headerlink&quot; title=&quot;发布&quot;&gt;&lt;/a&gt;发布&lt;/h1&gt;&lt;p&gt;对于大型生产环境和复杂的业务系统来说，发布应用或者变更并不是简单的在服务器上运行二进制包或者脚本就可以了，这样很不便于服务的管理，且服务的稳</summary>
      
    
    
    
    <category term="架构" scheme="http://www.huckops.xyz/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="SRE" scheme="http://www.huckops.xyz/tags/SRE/"/>
    
  </entry>
  
  <entry>
    <title>自动化运维</title>
    <link href="http://www.huckops.xyz/2022/03/27/SRE%E6%96%B9%E6%B3%95%E8%AE%BA/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    <id>http://www.huckops.xyz/2022/03/27/SRE%E6%96%B9%E6%B3%95%E8%AE%BA/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/</id>
    <published>2022-03-27T14:02:34.000Z</published>
    <updated>2022-03-27T14:55:42.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自动化运维的价值"><a href="#自动化运维的价值" class="headerlink" title="自动化运维的价值"></a>自动化运维的价值</h1><p>对于大型的计算集群或者线上（测试）环境，有成千上万台服务器在运行，单凭SRE进行手动变更或者运维是远不能支持平时工作的，所以这里就要讲到自动化运维的价值：</p><h2 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h2><p>大型集群在硬件层面很难做到完全统一，但是在系统层面、软件层面和服务层面是可以通过认为影响达到一致的。生产环境的一直能很大程度上标准化生产环境，以降低环境差异化带来的人力成本或者其他附加成本。比如在生产环境中，机器可以通过群组的方式进行批量管理，每个群组内的机器试用相同的环境配置，对于配置试用repo进行统一管理，由此可以把机器的管理粒度从单机提升到群组（但是同时带来一个隐患，如果对群组进行配置变更，如果配置失败影响面就会从单机上升到大批量）</p><p>硬件层面比较难做到一致化或者统一化（主要问题来源于设备供应商不同，不同设备的管理方式也不大一样），所以在设计自动化的时候尽量兼容更多的硬件平台或者指定CFI（以上两个选择一个就好，后者可能更贴合当前实际），同样在设计时也尽量使用通用管理方式，比如ipmi协议。</p><h2 id="平台化"><a href="#平台化" class="headerlink" title="平台化"></a>平台化</h2><p>对于变更或者运维操作具象成平台上操作的一个对象，对象可以是单机，也可以是集群，也可以是自定的群组。平台化是自动化运维的上层构建，通过平台对于下层管理的资源进行自动化运维，降低操作时间和操作量。同样也可以化解很多模式化或者重复性高的工作。</p><p>同样，一个成熟的环境不会只有一个平台进行运维支撑，所以设计平台时一般都会流出很大的横向扩展的裕量（比如API或者通用化模板）。</p><h2 id="修复速度快，行动敏捷，时间和人力成本有效节省"><a href="#修复速度快，行动敏捷，时间和人力成本有效节省" class="headerlink" title="修复速度快，行动敏捷，时间和人力成本有效节省"></a>修复速度快，行动敏捷，时间和人力成本有效节省</h2><p>自动化运维主体就是通过代码的方式解决很多的手动才能解决的问题，代码的执行效率总是高于人工的，所以在一些工作上面能显著提高效率。而且自动化可以针对一些常规故障的自动修复，或者在系统变更错误甚至系统崩溃时能进行快速回滚，实现MTTR指标提升。</p><h1 id="自动化运维软件的定义"><a href="#自动化运维软件的定义" class="headerlink" title="自动化运维软件的定义"></a>自动化运维软件的定义</h1><p>自动化运维软件可以定义为一个元软件。自动化软件通常是进行操作其他软件以达到全流程自动化的目的，其主要原理其实就是把人的机械性操作转换成软件。所以在自动化软件中经常能看见使用shell调用其他脚本或者命令，比如常见的useradd。</p><blockquote><p>在我就职于小米的时候，我的主要工作就是进行硬件层自动化的软件研发。因为采购的服务器品牌较多，比如dell的服务器使用的带外管理工具是idracadm，但是浪潮又使用的是其他自研工具。程序的通用性就不是很大，所以在真正的代码中基本都是使用命令行在调用厂商提供的管理工具（有些数据采集或者操作ipmi实在是做不了）。对照上边的三个价值review这项工作，可以很明了的看出自动化的价值在实际生产中的意义。</p></blockquote><h1 id="自动化分级"><a href="#自动化分级" class="headerlink" title="自动化分级"></a>自动化分级</h1><p>自动化分级通常也是使用的L5分级法，即L1是全无自动化，所有工作都需要认为干预，L5是自动化的最高等级，一切工作都无需认为干预，运维支持系统能完全实现自动化运维。</p><blockquote><p>人工智能分为三个阶段，自动化、智能化、智慧化。目前人工智能只是实现了自动化，正在向智能化发展。 –沃兹基硕德</p></blockquote><p>运维也是一样的。运维目前整个行业都在逐渐构建自动化运维体系，且国内没有一个规范的建设标准，都是以google为标杆建设自己的自动化运维系统。近年有公司的自动化已经趋于完善，开始实现AIOps（智能运维），但是始终离L5的运维支持系统还有很大差距。</p><h1 id="集群运维自动化"><a href="#集群运维自动化" class="headerlink" title="集群运维自动化"></a>集群运维自动化</h1><p>集群运维自动化，通常是要依赖于强大的基础设施的，比如：</p><ol><li>稳定安全的数据中心以及网络中心（排除非人为和不可抗外力）</li><li>强大的数据托管平台（比如CMDB）及其他的支持数据和资源</li><li>稳定良好的基础服务环境（比如无污染的DNS）</li><li>等等……</li></ol><blockquote><p>林子大了什么鸟都有</p></blockquote><p>难免自动化在集群中应用时会出现部分机器故障或者自动化失败，这个在上线以后是很致命的。所以可以引入一个Prodtest的概念，在上线之前进行测试，验证：</p><ol><li>服务器依赖是不是都可用，配置是不是想要的</li><li>一致性怎么样</li><li>是否能确定“例外”都是合理的</li></ol><p>比如对于一个基础设施服务的Prodtest就可以以如下方式进行：</p><ol><li>机器基本环境检查，装包检查，配置一致性检查</li><li>双线检查 a. 服务线：服务是否可用，稳定 b. 监控线：监控是否健康，稳定，数据是否准确（我确实见过监控数据和人工查数据不一致的情况的） </li></ol><p>注意，以上测试都是链式的，任何一个节点出问题都要停下来解决完成再向后推进。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自动化运维的价值&quot;&gt;&lt;a href=&quot;#自动化运维的价值&quot; class=&quot;headerlink&quot; title=&quot;自动化运维的价值&quot;&gt;&lt;/a&gt;自动化运维的价值&lt;/h1&gt;&lt;p&gt;对于大型的计算集群或者线上（测试）环境，有成千上万台服务器在运行，单凭SRE进行手动变更或者</summary>
      
    
    
    
    <category term="架构" scheme="http://www.huckops.xyz/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="SRE" scheme="http://www.huckops.xyz/tags/SRE/"/>
    
  </entry>
  
  <entry>
    <title>密码管理中心</title>
    <link href="http://www.huckops.xyz/2021/11/20/cmdb/%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%E4%B8%AD%E5%BF%83(%E6%9C%8D%E5%8A%A1%E7%AB%AF)/"/>
    <id>http://www.huckops.xyz/2021/11/20/cmdb/%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%E4%B8%AD%E5%BF%83(%E6%9C%8D%E5%8A%A1%E7%AB%AF)/</id>
    <published>2021-11-20T12:57:34.000Z</published>
    <updated>2021-11-20T14:31:14.708Z</updated>
    
    <content type="html"><![CDATA[<p>对于生产传环境服务器，密码一定不是固定的。对于安全起见，密码需要设计成动态的，主要防止服务器而已登录和服务器权限管理。</p><p>密码管理中心的主要功能就是对于服务器的密码进行动态修改，并对生成的密码进行存储，密码展现给指定的业务线和系统管理员。</p><h1 id="JWT认证-Tag认证"><a href="#JWT认证-Tag认证" class="headerlink" title="JWT认证/Tag认证"></a>JWT认证/Tag认证</h1><h2 id="JWT认证"><a href="#JWT认证" class="headerlink" title="JWT认证"></a>JWT认证</h2><p>JWT是登录鉴权认证。用户登录系统时向API发送自己的账号和密码，服务端做账号和密码校验，如果校验成功，向前端返回一个加密JWT Token，作为用户的认证标志。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;code&quot;</span>: <span class="number">100</span>,</span><br><span class="line"><span class="attr">&quot;tag&quot;</span>: [</span><br><span class="line"><span class="string">&quot;owt.sa&quot;</span>,</span><br><span class="line"><span class="string">&quot;owt.mi_img&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">&quot;token&quot;</span>: <span class="string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjoxNjM3NDIzNjU2LCJpc3MiOiJwYXNzd29yZCJ9.2jEUJyowdtzdz13zkgS6q_iS54ES0wk37uEKj0NN3-Y&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户每次登录都会返回Token和自己用户Tag，前端可以根据传回来的Tag对一些页面进行有选择的渲染，达到前端权限控制的目的。</p><h2 id="Tag认证"><a href="#Tag认证" class="headerlink" title="Tag认证"></a>Tag认证</h2><p>Tag认证是不同于JWT认证的，Tag认证主要是认证用户权限。对于一个公司来说会有很多个部门，每个部门负责自己的一个业务线，每个业务线之间权限应该是独立的，业务线SRE都不能查询其他业务线的服务器信息。这里使用Tag，可以把主机绑定到业务线的Tag，把用户绑定到业务线的Tag组，用户查询密码或者服务器信息的时候只能查到自己业务线的主机，这样就杜绝了密码随意查看的问题。</p><p>在每个公司都会有一个SA组，这个组的主要工作是对服务器进行管理、维修，这个组应该持有最高权限，可以查询所有业务线的密码，所以单独使用一个业务线Tag，<code>owt.sa</code>。用户使用这个Tag之后可以随意查询所有业务线的服务器信息。</p><p><code>owt.sa</code>业务线Tag表明是系统最高管理员，所以也享有添加Tag和添加用户账号的权限。业务线SRE无权添加自己业务线的用户，只可以向SA申请添加（正在考虑是否给业务线设置一个业务线Super SRE作为业务线的维护领导，可以添加业务线SRE用户）。</p><h1 id="主机管理"><a href="#主机管理" class="headerlink" title="主机管理"></a>主机管理</h1><h2 id="主机发现-添加"><a href="#主机发现-添加" class="headerlink" title="主机发现/添加"></a>主机发现/添加</h2><h3 id="主机发现（待后期完善）"><a href="#主机发现（待后期完善）" class="headerlink" title="主机发现（待后期完善）"></a>主机发现（待后期完善）</h3><p>对于大型生产集群，服务器的体量可能会非常大，可能是几万台甚至十几万台，这样进行手动主机清单维护就是很麻烦的了。所以可以使用PasswordCenterClient配合PasswordCenterServer做一个自动发现，当主机装机完成之后把自己的信息转给服务端，服务端进行表校验，如果不存在告知服务器上报自己的设备信息，自动进行入库。但是这种方式对于小IDC机房来说是完全没有必要的，因为自动发现可能会出现一些问题，比如脏数据，或者发现失败等…..对于小机房来说成本会被无意间拉高，所以还有一个方式是手动录入。</p><h3 id="手动录入"><a href="#手动录入" class="headerlink" title="手动录入"></a>手动录入</h3><p>手动录入就是将服务器信息手动录入到系统中。PasswordCenterClient每次上报密码的时候都会先检查自己是否被录入到系统中，如果没有被录入则不更新密码，防止自动改密导致密码丢失无法登录主机（生产服务器的大忌）。这种方法对于小型生产环境的成本是最低的，指挥稍微增大一点点工作量，但是基本不会出现脏数据，不会给运维带来麻烦。</p><h2 id="主机密码管理"><a href="#主机密码管理" class="headerlink" title="主机密码管理"></a>主机密码管理</h2><h3 id="主机密码推送"><a href="#主机密码推送" class="headerlink" title="主机密码推送"></a>主机密码推送</h3><p>对于服务器密码来说，是绝密的，如果服务器密码被泄露可能会导致服务器被攻陷，所以在密码传输的时候必须进行密码加密。本项目使用AES加密，且在服务端存储的时候也是以AES密钥串的形式进行存储的，防止在密码传输过程中被恶意抓包而密码泄露。</p><h3 id="主机查询和主机密码查询"><a href="#主机查询和主机密码查询" class="headerlink" title="主机查询和主机密码查询"></a>主机查询和主机密码查询</h3><p>用户可以使用前端进行主机查询，但是在查询过程中只能返回自己Tag下面的服务器信息（除了<code>owt.sa</code>）。且在密码向前端传输的时候也是使用AES进行加密的，直接从源头上遏制了密码在传输过程中发生泄露。</p><p><strong>其他功能正在计划开发中，后续继续更新这个项目的解析</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;对于生产传环境服务器，密码一定不是固定的。对于安全起见，密码需要设计成动态的，主要防止服务器而已登录和服务器权限管理。&lt;/p&gt;
&lt;p&gt;密码管理中心的主要功能就是对于服务器的密码进行动态修改，并对生成的密码进行存储，密码展现给指定的业务线和系统管理员。&lt;/p&gt;
&lt;h1 id=</summary>
      
    
    
    
    <category term="运维平台" scheme="http://www.huckops.xyz/categories/%E8%BF%90%E7%BB%B4%E5%B9%B3%E5%8F%B0/"/>
    
    
    <category term="CMDB平台" scheme="http://www.huckops.xyz/tags/CMDB%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>生产风险管理</title>
    <link href="http://www.huckops.xyz/2021/10/05/SRE%E6%96%B9%E6%B3%95%E8%AE%BA/%E9%A3%8E%E9%99%A9%E7%AE%A1%E7%90%86/"/>
    <id>http://www.huckops.xyz/2021/10/05/SRE%E6%96%B9%E6%B3%95%E8%AE%BA/%E9%A3%8E%E9%99%A9%E7%AE%A1%E7%90%86/</id>
    <published>2021-10-05T08:26:34.000Z</published>
    <updated>2021-10-05T09:06:48.111Z</updated>
    
    <content type="html"><![CDATA[<h1 id="e-x-效应"><a href="#e-x-效应" class="headerlink" title="$e^x$效应"></a>$e^x$效应</h1><p>在生产环境下，所有服务的可用性都不可能是100%，大多数企业都会尽量的向100%靠近，但是在极度接近100%的过程中，成本也会成指数上涨。可以理解为可靠性每提升一个等级，就会指出更多的成本，类似于$e^x$函数。</p><h1 id="风险管理"><a href="#风险管理" class="headerlink" title="风险管理"></a>风险管理</h1><p>规避风险的成本主要可以分为两部分：</p><ol><li><p>计算资源成本：包括服务器成本和运维成本</p></li><li><p>机会成本：由某组织承担，构建资源分配和减少风险系统、监控。</p></li></ol><h1 id="风险度量"><a href="#风险度量" class="headerlink" title="风险度量"></a>风险度量</h1><p>风险度量的指标主要是服务的可用性，但是可用性通常被分为两种：</p><h2 id="基于时间"><a href="#基于时间" class="headerlink" title="基于时间"></a>基于时间</h2><p>基于时间的服务可用性主要是衡量服务在整个服务时间内的可用时间，其计算公式为$\frac {T_e} {T_a}$。</p><h2 id="基于请求"><a href="#基于请求" class="headerlink" title="基于请求"></a>基于请求</h2><p>基于请求的服务可用性主要是衡量正确请求在所有请求中的比例，其计算公式为$\frac {R_e} {R_a}$。</p><h1 id="服务风险容忍"><a href="#服务风险容忍" class="headerlink" title="服务风险容忍"></a>服务风险容忍</h1><h2 id="可用性目标及可用性容忍"><a href="#可用性目标及可用性容忍" class="headerlink" title="可用性目标及可用性容忍"></a>可用性目标及可用性容忍</h2><p>可用性目标和可用性容忍通常是一个服务的最低可用性，如果低于这个可用性就可能导致用户对该服务产生负面的评价，同时也会影响服务的收入和上游甲方的评价下降。所以该部分应该更加专注于消费者。</p><h2 id="故障类型"><a href="#故障类型" class="headerlink" title="故障类型"></a>故障类型</h2><p>常见的故障主要是宕机故障，但是其他种类的故障也不容忽视。比如用户信息返回错乱，A用户可以免鉴权等操作直接可以查到B用户的个人信息甚至隐私信息，这样的服务就不能满足服务的几个基本特性之一的安全性。所以在用户侧的认知看来，安全故障的权重是高于宕机故障的，因为安全故障在很大程度上可能会损害用户对于该种服务的信任程度。所以在安全面前，质量应该让路。</p><h2 id="成本"><a href="#成本" class="headerlink" title="成本"></a>成本</h2><p>前面说过，可用性和成本并非是线性的，而是乘方关系。对于常见服务来说，可能99.95%的可用性已经足够了，但是如果想把服务优化到99.99%，可能需要花费100万的成本，如果想进一步提升，将可用性提升到99.999%，就可能会花费1000万甚至更高。通过成本和可用性的衡量可以得出，在用户容忍的范围内，应该做到成本和可靠性平衡。</p><h2 id="其他风险容忍"><a href="#其他风险容忍" class="headerlink" title="其他风险容忍"></a>其他风险容忍</h2><p>对于其他风险，只要集中在延迟方面。如打开网页速度缓慢等情况。对于普通网页来说，过长的相应周期会导致用户对该网页的评价降低。如广告服务，响应时间过长可能在用户侧的评价变化不会很大，但是在广告主会对服务的评价产生很大的变化、</p><h1 id="基础设施风险容忍"><a href="#基础设施风险容忍" class="headerlink" title="基础设施风险容忍"></a>基础设施风险容忍</h1><h2 id="可用性目标及可用性容忍-1"><a href="#可用性目标及可用性容忍-1" class="headerlink" title="可用性目标及可用性容忍"></a>可用性目标及可用性容忍</h2><p>定义和服务风险容忍相同。</p><h2 id="故障类型-1"><a href="#故障类型-1" class="headerlink" title="故障类型"></a>故障类型</h2><p>该部分的故障可能存在偏差。如高消耗低延迟的服务请求，用户想要的是队列中无数据，即处理速度够快。但是对于高IO的请求来说，希望队列中永远都不为空，这样可以最大程度上降低因为CPU空闲导致的效率低。所以对于基础服务来说，是不是故障完全取决于基础设施种类。</p><h2 id="成本容忍"><a href="#成本容忍" class="headerlink" title="成本容忍"></a>成本容忍</h2><p>权衡低延迟和高IO两种基础设施，可以得出一个这种方案，即按照计算需求进行资源配比，创建两套计算集群，每个集群做与自己性能相匹配的job，这样可以提高资源的合理配置率和计算的质量。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;e-x-效应&quot;&gt;&lt;a href=&quot;#e-x-效应&quot; class=&quot;headerlink&quot; title=&quot;$e^x$效应&quot;&gt;&lt;/a&gt;$e^x$效应&lt;/h1&gt;&lt;p&gt;在生产环境下，所有服务的可用性都不可能是100%，大多数企业都会尽量的向100%靠近，但是在极度接近10</summary>
      
    
    
    
    <category term="架构" scheme="http://www.huckops.xyz/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="SRE" scheme="http://www.huckops.xyz/tags/SRE/"/>
    
  </entry>
  
  <entry>
    <title>生产动力环境</title>
    <link href="http://www.huckops.xyz/2021/10/04/SRE%E6%96%B9%E6%B3%95%E8%AE%BA/%E7%94%9F%E4%BA%A7%E5%8A%A8%E5%8A%9B%E7%8E%AF%E5%A2%83/"/>
    <id>http://www.huckops.xyz/2021/10/04/SRE%E6%96%B9%E6%B3%95%E8%AE%BA/%E7%94%9F%E4%BA%A7%E5%8A%A8%E5%8A%9B%E7%8E%AF%E5%A2%83/</id>
    <published>2021-10-04T15:58:34.000Z</published>
    <updated>2021-10-04T15:58:08.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="硬件层"><a href="#硬件层" class="headerlink" title="硬件层"></a>硬件层</h1><p>通常来说，目前服务器大多都使用的是本地硬件服务器或者云服务器。本地服务器常见是使用X86架构，目前华为鲲鹏在发展ARM架构服务器。云服务器通常是虚拟服务器，大部分都是基于KVM（QEMU）的。</p><p>目前企业很少会使用单种云，大部分都是使用混合云，对于涉密业务或者大量运算的业务则放在本地机房的物理服务器中，对于公网服务就放在公有云服务器。</p><p>混合云和多地多中心的机房优势在于：</p><ol><li><p>多地容灾，单计算中心故障有其余中心冗余</p></li><li><p>服务隔离，涉密服务本地运行，保证数据安全</p></li></ol><h1 id="软件层"><a href="#软件层" class="headerlink" title="软件层"></a>软件层</h1><h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><h3 id="计算资源管理"><a href="#计算资源管理" class="headerlink" title="计算资源管理"></a>计算资源管理</h3><p>构建CMDB，集中化管理线上和测试计算资源，将服务器信息和网络资源信息进行精细化管理，落实到计算实例上，有效提高资源管理效率。</p><p>对于批量运维任务，可以使用Ansible等自动化运维工具做自动化管理。</p><h3 id="计算任务管理"><a href="#计算任务管理" class="headerlink" title="计算任务管理"></a>计算任务管理</h3><p>将计算任务批量化，使用批量部署工具进行任务提交，多机部署多计算实例，提高计算任务管理效率。</p><p>本处可以使用Google提供的Borg或者Kubernetes做计算任务管理。批量提交计算任务后，每个计算实体都是以一个（类）hostname代替。该种方式在Borg中被叫做BNS，即Borg Name Server，将Borg任务解析到指定IP。</p><h3 id="存储服务"><a href="#存储服务" class="headerlink" title="存储服务"></a>存储服务</h3><p>计算节点应配备本地磁盘，但是该部分磁盘不作为存储盘使用，只保存计算任务产生的临时文件。对于持久化文件可以写入到HDFS等文件存储系统。</p><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><p>在生产环境中常用到SDN进行网络组网，通过SDN实现负载均衡，并将宽带合理的分配给计算资源，防止因某计算任务发生网络独占，由此可以提高网络方面的成本转化率。</p><p>对于文件存储服务或者大文件传输比较多的服务，通常会使用到CDN服务，但是在Google的生产环境中，其使用的是GSLB，即全球负载均衡服务。该种架构即在全球多地部署计算节点（中心），当用户请求服务器时，智能DNS会返回距离用户最近、负载最小的计算节点，由此可以大幅提高用户的访问效果。</p><h1 id="其他层"><a href="#其他层" class="headerlink" title="其他层"></a>其他层</h1><h2 id="监控服务"><a href="#监控服务" class="headerlink" title="监控服务"></a>监控服务</h2><p>构建快速有效的监控系统，尽可能多的收集有效数据（并不是越多越好），在某些大型互联网公司，如果有相关的技术支持和财力支持，完全可以使用监控抓取到的数据进行分析，从而可以进行故障判断，提前规避故障。</p><h1 id="研发管理"><a href="#研发管理" class="headerlink" title="研发管理"></a>研发管理</h1><p>软件研发必要的两个要素：团队合作和文档输出。</p><h2 id="团队合作"><a href="#团队合作" class="headerlink" title="团队合作"></a>团队合作</h2><p>尽可能使用代码托管平台，如SVN或者Git。这样有利于团队内代码的代码需求拉通。代码一定要有review机制，开发者禁止直接将代码推入正式分支，所有请求必须提交pr，并由第三人进行代码审计，着重关注pr中的变更。</p><h2 id="文档输出"><a href="#文档输出" class="headerlink" title="文档输出"></a>文档输出</h2><p>软件研发过程中会输出很多文档，如代码规范、API接口等，这些文档要保证团队内的所有成员随时可编辑，随时可查看。可以使用wiki进行文档托管。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;硬件层&quot;&gt;&lt;a href=&quot;#硬件层&quot; class=&quot;headerlink&quot; title=&quot;硬件层&quot;&gt;&lt;/a&gt;硬件层&lt;/h1&gt;&lt;p&gt;通常来说，目前服务器大多都使用的是本地硬件服务器或者云服务器。本地服务器常见是使用X86架构，目前华为鲲鹏在发展ARM架构服务器。云</summary>
      
    
    
    
    <category term="架构" scheme="http://www.huckops.xyz/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="SRE" scheme="http://www.huckops.xyz/tags/SRE/"/>
    
  </entry>
  
  <entry>
    <title>SRE架构</title>
    <link href="http://www.huckops.xyz/2021/10/03/SRE%E6%96%B9%E6%B3%95%E8%AE%BA/SRE%E6%9E%B6%E6%9E%84/"/>
    <id>http://www.huckops.xyz/2021/10/03/SRE%E6%96%B9%E6%B3%95%E8%AE%BA/SRE%E6%9E%B6%E6%9E%84/</id>
    <published>2021-10-03T04:36:34.000Z</published>
    <updated>2021-10-03T06:08:50.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SA和Dev-Ops的挑战"><a href="#SA和Dev-Ops的挑战" class="headerlink" title="SA和Dev/Ops的挑战"></a>SA和Dev/Ops的挑战</h1><p>通常企业会招聘很多的SA工程师（系统管理员），该部分工程师负责企业生产环境组件的运维，对于需要人工干预的操作进行人工干预。</p><p>目前在国内，各公司通常做法是SRE和SA分离，SRE负责业务侧管理和维护，SA工程师负责企业基础架构的维护，包括服务器、基础环境维护。同时Dev和Ops部门分离，所以带来两种成本。</p><ol><li><p>直接成本：业务线扩展，Dev和Ops同步增加，人数共同增长。</p></li><li><p>间接成本： 消息拉通、同步问题，可能会导致各部门信息不同步，间接导致团队目标不统一。</p></li></ol><p>Dev和Ops部门最大的工作分歧通常出现在新版本发布、变更期间，也可能是发布速度原因。</p><ul><li><p>版本发布： Dev希望随时发布，但是Ops部门希望生产环境一成不变，避免非必要情况下的变更和发版（新版本发布、变更和动力环境割接都有可能导致系统崩溃）</p></li><li><p>发布速度： Dev部门希望发布是0秒，质量部门希望服务是没有抖动的，但通常来说是不可能的（即使使用平稳变更），可能在变更或者发布的时候会出现服务短暂不可用的情况，所以就可能出现发版或者变更速度跟不上Dev和质量部门的要求。</p></li></ul><h1 id="大型互联网企业SRE解决方案"><a href="#大型互联网企业SRE解决方案" class="headerlink" title="大型互联网企业SRE解决方案"></a>大型互联网企业SRE解决方案</h1><p>大型互联网企业会组建DevOps团队，其中，该团队的大部分工程师来自软件开发，其余部分工程师可能不是软件开发工程师，但是该部分成员都具有软件开发工程师的基本技能，可以以软件工程的思路解决SRE问题，同样也可以很容易的同步其他开发部门的需求和信息。</p><p>对于常见的互联网架构中，SRE需要完成的大部分工作都是机械性的，所以配备软件开发工程师的优势就在这里体现出来了。机械性的操作，软件开发工程师会构建一些自动化工具进行机械性操作，提高运维效率。</p><p>目前国内大型企业中，都在逐步取消Ops工程师的岗位，取而代之的是SRE工程师或者DevOps工程师。如小米，目前已经基本不招聘运维工程师了，招聘主要是DevOps工程师，该部分工程师都具有较强的软件开发能力。这部分工程师的工作内容大部分都是构建开发自己的运维平台，解决自己企业目前运维所遇到的问题。</p><h1 id="SRE方法论"><a href="#SRE方法论" class="headerlink" title="SRE方法论"></a>SRE方法论</h1><p>SRE基本系统构建：</p><ul><li>性能优化，延迟优化，可用性优化，效率优化</li><li>变更管理</li><li>监控</li><li>紧急事务处理</li><li>容量规划</li></ul><h2 id="研发工作跟进"><a href="#研发工作跟进" class="headerlink" title="研发工作跟进"></a>研发工作跟进</h2><p>SRE团队应设备on call机制，on call工程师在工作时间内1on1对接业务侧需求。单个工程师on call时间不应过长，过长会导致处理效率下降。</p><p>On call工程师在完成当日工作后应对当天处理的故障及紧急情况做文本输出，作为部门或者全司的wiki输入。</p><h2 id="保证SLO下提升迭代速度"><a href="#保证SLO下提升迭代速度" class="headerlink" title="保证SLO下提升迭代速度"></a>保证SLO下提升迭代速度</h2><p>通常情况下，快速迭代和稳定的服务是很难沾上边的。所以SRE的一项很重要的工作就是保证SLO的情况下提高迭代速度。</p><p>对于任何服务，可用性都不可能是100%，即使真的能把服务做到100%，整个互联网传输过程也不会是100%。如本服务的可用性是99.99%，互联网会有很多层的交换路由，这些设备的可用性也不可能是100%，这里可用性是要通过乘法计算的。</p><p><a href="https://imgtu.com/i/4qTrt0"><img src="https://z3.ax1x.com/2021/10/03/4qTrt0.png" alt="4qTrt0.png"></a></p><p>所以，SRE需要考虑如何提升SLO，那么就需要考虑一下三个方向：</p><ol><li>最低可用性是多少，低于这个指标可能会导致用户使用体验降低。</li><li>可不可以用替代方案提高可用性。</li><li>可用性降低会不会影响用户的使用模式</li></ol><h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><p>监控在运维体系是非常有必要的。监控并不是一个软件，而是一个方法论。监控可以发现软硬件故障并进行报警。监控体系通常有三个途径：</p><ol><li>监控及报警</li><li>工单系统</li><li>日志系统</li></ol><h2 id="应急情况"><a href="#应急情况" class="headerlink" title="应急情况"></a>应急情况</h2><p>对于应急情况需要指定MTTF（平均失效时间）和MTTR（平均恢复时间）。通常对于变更产生的应急状况，要制定严格的MTTF，即失效多久之内必须恢复，恢复时间应小于MTTR。</p><h2 id="变更管理"><a href="#变更管理" class="headerlink" title="变更管理"></a>变更管理</h2><p>对于常见的发布和变更必须要进行备份即容灾，要保证变更有迹可循，变更故障随时回滚。通常对于大型企业都会构建一个配置分发平台，对于变更的配置进行统一下发并讲原配置进行备份。对于每一条变更都要能对应到责任人，并且保证在MTTF内恢复服务，超时即回滚。</p><h2 id="需求和容量"><a href="#需求和容量" class="headerlink" title="需求和容量"></a>需求和容量</h2><p>发布上线之前要进行服务器容量评估，其数据必须建立在已有的运维和运营数据之上进行评估，要设计一部分的冗余。并且要定期对服务器定期进行打压测试，以便把资源信息和容量对应。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SA和Dev-Ops的挑战&quot;&gt;&lt;a href=&quot;#SA和Dev-Ops的挑战&quot; class=&quot;headerlink&quot; title=&quot;SA和Dev/Ops的挑战&quot;&gt;&lt;/a&gt;SA和Dev/Ops的挑战&lt;/h1&gt;&lt;p&gt;通常企业会招聘很多的SA工程师（系统管理员），该部分</summary>
      
    
    
    
    <category term="架构" scheme="http://www.huckops.xyz/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="SRE" scheme="http://www.huckops.xyz/tags/SRE/"/>
    
  </entry>
  
  <entry>
    <title>K8S代码生成器</title>
    <link href="http://www.huckops.xyz/2021/09/12/container/K8S%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <id>http://www.huckops.xyz/2021/09/12/container/K8S%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/</id>
    <published>2021-09-12T02:42:01.000Z</published>
    <updated>2021-09-12T03:30:03.562Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: generated_files</span></span><br><span class="line"><span class="section">generated_files: gen_prerelease_lifecycle gen_deepcopy gen_defaulter gen_conversion gen_openapi</span></span><br></pre></td></tr></table></figure><p>generated_files文件定义了代码生成器，以上为k8s默认的几种代码生成器。</p><h1 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a>Tags</h1><p>代码生成器通过Tags识别要生成的代码和代码生成的方式。</p><h2 id="全局tags"><a href="#全局tags" class="headerlink" title="全局tags"></a>全局tags</h2><p>全局tags定义在doc.go中，对整个包中类型自动生成代码。</p><p><strong>占坑，后期填</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight makefile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/</summary>
      
    
    
    
    <category term="云计算" scheme="http://www.huckops.xyz/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="容器技术" scheme="http://www.huckops.xyz/tags/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>K8S源码构建</title>
    <link href="http://www.huckops.xyz/2021/09/12/container/K8S%E6%BA%90%E7%A0%81%E6%9E%84%E5%BB%BA/"/>
    <id>http://www.huckops.xyz/2021/09/12/container/K8S%E6%BA%90%E7%A0%81%E6%9E%84%E5%BB%BA/</id>
    <published>2021-09-12T01:36:34.000Z</published>
    <updated>2021-09-12T02:34:41.296Z</updated>
    
    <content type="html"><![CDATA[<p>K8S是使用golang进行编写的，所以在运行的时候需要将golang代码转换成二进制，K8S代码的构建方式有三种，本地构建、容器环境构建和Bazel环境构建。</p><h1 id="本地构建"><a href="#本地构建" class="headerlink" title="本地构建"></a>本地构建</h1><p>和C++项目类似的，大型项目不可能使用命令行逐个进行<code>go build</code>，所以可以使用makefile的方法构建项目。</p><p>在k8s所有项目中，存在两个MakeFile文件：</p><ul><li><p>Makefile：描述项目的编译顺序、编译规则和输出。</p></li><li><p>Makefile.generated_files： 描述代码生成逻辑。</p></li></ul><h2 id="Makefile文件解析"><a href="#Makefile文件解析" class="headerlink" title="Makefile文件解析"></a>Makefile文件解析</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: all</span></span><br><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(PRINT_HELP)</span>,y)</span><br><span class="line"><span class="section">all:</span></span><br><span class="line">@echo <span class="string">&quot;$$ALL_HELP_INFO&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="section">all: generated_files</span></span><br><span class="line">hack/make-rules/build.sh <span class="variable">$(WHAT)</span></span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure><p>这是执行<code>make all</code>的第一步，判断了是否为帮助输出，非帮助输出时，执行generated_files，用于代码生成，然后调用<code>hack/make-rules/build.sh</code>进行构建，参数<code>$(WHAT)</code>为欲构建的组件列表。</p><p>追溯到<code>hack/make-rules/build.sh</code>文件，其中调用的第一段函数是<code>kube::golang::build_binaries &quot;$@&quot;</code>，该段函数进行二进制构建，传入值即为上边说过的<code>$(WHAT)</code>。</p><p>调用链：</p><p>kube::golang::build_binaries -&gt; kube::golang::host_platform(获取平台类型) -&gt; kube::golang::get_physmem(判断内存是否达到标准) -&gt; kube::golang::build_binaries_for_platform(构建指定平台的二进制) -&gt; kube::golang::build_some_binaries(构建二进制) -&gt; go install</p><h1 id="容器构建"><a href="#容器构建" class="headerlink" title="容器构建"></a>容器构建</h1><p>以下为<code>make release</code>的构建代码：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: release release-in-a-container</span></span><br><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(PRINT_HELP)</span>,y)</span><br><span class="line">release release-in-a-container:</span><br><span class="line">@echo <span class="string">&quot;$$RELEASE_HELP_INFO&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">release release-in-a-container: KUBE_BUILD_CONFORMANCE = y</span><br><span class="line"><span class="section">release:</span></span><br><span class="line">build/release.sh</span><br><span class="line"><span class="section">release-in-a-container:</span></span><br><span class="line">build/release-in-a-container.sh</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure><p>以下为<code>make quick-release</code>的构建代码：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: release-skip-tests quick-release</span></span><br><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(PRINT_HELP)</span>,y)</span><br><span class="line">release-skip-tests quick-release:</span><br><span class="line">@echo <span class="string">&quot;$$RELEASE_SKIP_TESTS_HELP_INFO&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">release-skip-tests quick-release: KUBE_RELEASE_RUN_TESTS = n</span><br><span class="line">release-skip-tests quick-release: KUBE_FASTBUILD = true</span><br><span class="line">release-skip-tests quick-release:</span><br><span class="line">build/release.sh</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure><p>可以看出，两种构建方式使用的家谱本是同一个，但是<code>quick-release</code>多了两个变量<code>KUBE_RELEASE_RUN_TESTS</code>和<code>KUBE_FASTBUILD</code>。</p><p>追溯到<code>build/release.sh</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">kube::build::verify_prereqs   #检查构建环境</span><br><span class="line">kube::build::build_image    #构建镜像</span><br><span class="line">kube::build::run_build_command make cross   #构建</span><br><span class="line"></span><br><span class="line">if [[ $KUBE_RELEASE_RUN_TESTS =~ ^[yY]$ ]]; then  #是否进行检查/测试</span><br><span class="line">  kube::build::run_build_command make test</span><br><span class="line">  kube::build::run_build_command make test-integration</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">kube::build::copy_output    #拷贝输出</span><br><span class="line"></span><br><span class="line">kube::release::package_tarballs #打包</span><br></pre></td></tr></table></figure><p>构建时会使用三个容器：</p><p>build： 进行构建工作的容器</p><p>data： 数据存储容器</p><p>sync：同步容器</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;K8S是使用golang进行编写的，所以在运行的时候需要将golang代码转换成二进制，K8S代码的构建方式有三种，本地构建、容器环境构建和Bazel环境构建。&lt;/p&gt;
&lt;h1 id=&quot;本地构建&quot;&gt;&lt;a href=&quot;#本地构建&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="云计算" scheme="http://www.huckops.xyz/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="容器技术" scheme="http://www.huckops.xyz/tags/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>基于K8s的LNMP架构（HPA）</title>
    <link href="http://www.huckops.xyz/2021/09/04/container/%E5%9F%BA%E4%BA%8EK8S%E7%9A%84LNMP%E6%9E%B6%E6%9E%84%EF%BC%88HPA%EF%BC%89/"/>
    <id>http://www.huckops.xyz/2021/09/04/container/%E5%9F%BA%E4%BA%8EK8S%E7%9A%84LNMP%E6%9E%B6%E6%9E%84%EF%BC%88HPA%EF%BC%89/</id>
    <published>2021-09-04T15:58:34.000Z</published>
    <updated>2021-10-05T08:18:37.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LNMP"><a href="#LNMP" class="headerlink" title="LNMP"></a>LNMP</h1><p>LNMP架构是常见的Web全栈架构，目前许多网站都使用了该种方法进行开发。对于常见的传统架构，服务器可靠性不是很高，Nginx、PHP或者MySQL任意一个中间件发生故障都可能导致生产环境Web页面崩溃。或者PHP网站在发生高并发时，如果使用传统架构的单节点可能会服务器性能不足，不足以支持过高的并发量，所以将LNMP迁移到k8s架构上会解决以上问题。</p><h1 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h1><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p>MySQL是一种有状态服务，MySQL在某些情况下如果发生故障性退出可能会出现服务无法再次启动的情况，所以数据库一般都不会被创建到容器中，通常都是将数据库使用一个物理节点进行运行的。</p><p>本实例是使用k8s对LNMP进行全架构迁移，所以将数据库生成到k8s容器中。数据库中存放的是重要的业务数据，无论在任何时候都要保证数据不丢失。对于k8s的pod，其文件具有易失性，如果在pod发生故障的时候会重新生成pod，原pod中的文件将不会被保存。理论上来说，可以使用pod的hostPath进行本地存储，但是通常k8s集群都是多台主机运行的，数据库副本也通常是飘移的，当数据库副本被调度到其他节点的时候原数据将不会被保留。所以这里可以使用一个外部文件存储StorageClass生成PVC进行动态挂载，MySQL调度到其他节点时也可以读取到数据文件。</p><p>从上边描述可以看出，如果数据库发生故障的时候可能会影响业务，但是对于k8s来说，使用MySQL做主从幅值和读写分离是比较麻烦的，所以在使用Deployment的时候不宜生成多副本。本处只生成一个副本进行测试。</p><h2 id="PHP和Nginx"><a href="#PHP和Nginx" class="headerlink" title="PHP和Nginx"></a>PHP和Nginx</h2><p>在LNMP架构中，Nginx作为前端和反向代理服务器。当Nginx接收到请求时，如果是静态文件请求，则Nginx直接进行响应。当请求为php请求时，nginx将请求转发给php后端服务进行逻辑处理。</p><p>从上边原理可见得，lnmp请求处理是由两部分构成的，也并非所有请求都要经过这两个环节，所以可能会出现两个环节的负载/请求量不同的情况。在使用k8s做lnmp架构时，可以将nginx和php进行分离，分别使用多副本动态调度，以应对不同环节的不同负载状况。</p><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><h2 id="PVC声明"><a href="#PVC声明" class="headerlink" title="PVC声明"></a>PVC声明</h2><p>本实例已经事先声明了Cephfs的StorageClass，故本处不再赘述。直接使用声明好的SC进行PVC申请声明。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span>  <span class="string">mysql</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dz</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">5Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">ceph</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span>  <span class="string">dz</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dz</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">5Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">ceph</span></span><br></pre></td></tr></table></figure><p>mysql PVC作为mysql的文件存储PVC，主要存储数据库生成的文件以及其他数据库产生的数据文件。前边有提及到不使用容器生成数据库的原因，还有一个较大的原因是使用网络存储，无论是网络延迟还是存储网络掉线都可能会影响数据库的服务稳定性。本处使用的权限符可以是ReadWriteOnce，这样只可被一个容器进行挂载，也可以满足mysql单副本的要求。</p><p>dz PVC用来存放php程序。php程序的前后端通常都是不分离的，php程序中有很大一部分都是静态资源，所以这个PVC要被设置成ReadWriteMany，用以挂载到多个容器上，实现nginx和php的文件共享。</p><h2 id="MySQL资源声明"><a href="#MySQL资源声明" class="headerlink" title="MySQL资源声明"></a>MySQL资源声明</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dz</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">mysql:5.6</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;512Mi&quot;</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;500m&quot;</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">3306</span></span><br><span class="line">        <span class="attr">livenessProbe:</span></span><br><span class="line">          <span class="attr">tcpSocket:</span></span><br><span class="line">            <span class="attr">port:</span> <span class="number">3306</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">90</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">sjh080815</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/var/lib/mysql</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">mysql-pvc</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql-pvc</span></span><br><span class="line">          <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">              <span class="attr">claimName:</span> <span class="string">mysql</span></span><br><span class="line">              </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dz</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mysql</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">3306</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">3306</span> </span><br></pre></td></tr></table></figure><p>创建一个单副本的MySQL Deployment，将前边创建的pvc挂载给pod，并且创建一个3306端口的监听。因为数据库初始化过程是比较缓慢的，所以创建生存探针的时候将initialDelaySeconds时间设置较长，若90秒内端口还未正常工作，控制器将会删除这个pod重新生成。90秒后如果正常运行即每10s进行一次端口探测，若不存在就重生pod。</p><p>创建一个Service，将pod生成一个endpoint后映射到cluster IP上，将容器的3306端口映射到cluster IP上。</p><h2 id="PHP资源声明"><a href="#PHP资源声明" class="headerlink" title="PHP资源声明"></a>PHP资源声明</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">php</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dz</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">php</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">php</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">php</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/sjh080815/php-mysqli</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;128Mi&quot;</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;500m&quot;</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">9000</span></span><br><span class="line">        <span class="attr">livenessProbe:</span></span><br><span class="line">          <span class="attr">tcpSocket:</span></span><br><span class="line">            <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">20</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">php-static</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">php-static</span></span><br><span class="line">          <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">              <span class="attr">claimName:</span> <span class="string">dz</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">autoscaling/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">HorizontalPodAutoscaler</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">php</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dz</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">maxReplicas:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">minReplicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">scaleTargetRef:</span></span><br><span class="line">    <span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">php</span></span><br><span class="line">  <span class="attr">targetCPUUtilizationPercentage:</span> <span class="number">85</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">php</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dz</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">php</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">php</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">9000</span></span><br></pre></td></tr></table></figure><p>生成一个php Deployment，挂载PVC到容器中，设置一个生存探针，防止容器发生故障。</p><p>创建一个HPA，以应对高并发场景。HPA扩展的依据是当CPU使用量超过85%，当容器的CPU使用量超过85%时，调度器创建新的pod。</p><p>创建一个Service，将php pod网络映射到cluster中。创建Service创建了endpoint，每当生成一个pod的时候，selector会自动选择出带有指定label的pod加入到endpoint中。</p><h2 id="Nginx资源声明"><a href="#Nginx资源声明" class="headerlink" title="Nginx资源声明"></a>Nginx资源声明</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dz</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">default.conf:</span> <span class="string">|-</span></span><br><span class="line"><span class="string">    server &#123;</span></span><br><span class="line"><span class="string">        listen 80;</span></span><br><span class="line"><span class="string">        server_name localhost;</span></span><br><span class="line"><span class="string">        root /usr/share/nginx/html;</span></span><br><span class="line"><span class="string">        index index.html index.php;</span></span><br><span class="line"><span class="string"></span> </span><br><span class="line">        <span class="string">location</span> <span class="string">~</span> <span class="string">\.php$</span> &#123;</span><br><span class="line">            <span class="string">root</span> <span class="string">/usr/local/nginx/html;</span></span><br><span class="line">            <span class="string">fastcgi_pass</span> <span class="string">php:9000;</span></span><br><span class="line">            <span class="string">fastcgi_param</span> <span class="string">SCRIPT_FILENAME</span> <span class="string">/usr/share/nginx/html$fastcgi_script_name;</span></span><br><span class="line">            <span class="string">include</span> <span class="string">fastcgi_params;</span></span><br><span class="line">            <span class="string">fastcgi_connect_timeout</span> <span class="string">60s;</span></span><br><span class="line">            <span class="string">fastcgi_read_timeout</span> <span class="string">300s;</span></span><br><span class="line">            <span class="string">fastcgi_send_timeout</span> <span class="string">300s;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dz</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">&quot;128Mi&quot;</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">&quot;500m&quot;</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">livenessProbe:</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">                <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">20</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">php-static</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/etc/nginx/conf.d/default.conf</span></span><br><span class="line">            <span class="attr">subPath:</span> <span class="string">default.conf</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">php-static</span></span><br><span class="line">          <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">              <span class="attr">claimName:</span> <span class="string">dz</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">          <span class="attr">configMap:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">nginx-config</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">autoscaling/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">HorizontalPodAutoscaler</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dz</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">maxReplicas:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">minReplicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">scaleTargetRef:</span></span><br><span class="line">    <span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">targetCPUUtilizationPercentage:</span> <span class="number">85</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dz</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">80</span> </span><br></pre></td></tr></table></figure><p>创建一个nginx配置ConfigMap，在生成nginx Deployment的时候将ConfigMap中的数据以文件的方式进行挂载，创建livenessProbe探针检测80端口。</p><p>创建HPA和Service，原理和上边的php相同。</p><h2 id="Ingress配置"><a href="#Ingress配置" class="headerlink" title="Ingress配置"></a>Ingress配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dz</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">dz</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">dz</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ingressClassName:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">www.test.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pathType:</span> <span class="string">ImplementationSpecific</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">            <span class="attr">serviceName:</span> <span class="string">nginx</span></span><br><span class="line">            <span class="attr">servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>创建一个Ingress，将<code>www.test.com</code>解析指向nginx的Service中，访问时nginx被轮询，当单pod发生故障的时候对业务的影响会被降到最小。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LNMP&quot;&gt;&lt;a href=&quot;#LNMP&quot; class=&quot;headerlink&quot; title=&quot;LNMP&quot;&gt;&lt;/a&gt;LNMP&lt;/h1&gt;&lt;p&gt;LNMP架构是常见的Web全栈架构，目前许多网站都使用了该种方法进行开发。对于常见的传统架构，服务器可靠性不是很高，Ngin</summary>
      
    
    
    
    <category term="云计算" scheme="http://www.huckops.xyz/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
    <category term="容器技术" scheme="http://www.huckops.xyz/tags/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
